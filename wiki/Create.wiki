#summary Instructions - part 2: Creating a configuration file
#labels Phase-Deploy
[Download << 1. Downloading the program files] | [Upload 3. Uploading the necessary files >>]

===2. Creating a configuration file===

This section provides step-by-step instructions for creating a configuration file. It also provides a complete reference of the options available. If you are creating [http://www.google.com/support/webmasters/bin/answer.py?answer=34627&topic=8493 Mobile Sitemaps], see the additional mobile guidelines.

In order to create a configuration file for your site, you must have the following information:

 * The base URL for your site (such as {{{http://www.example.com/}}}). Only URLs that begin with this base URL can be included in the Sitemap. Ensure that you include the protocol (such as {{{http://}}}). For instance, {{{http://www.google.com}}} is a valid base url, but {{{www.google.com}}} is not.
 * The web server path to the location where you want to store the Sitemap. Generally, this is the path to the base URL as the Sitemap cannot contain URLs that are in a higher-level directory from the location of the Sitemap. When you run the Google Sitemap Generator, it creates the Sitemap and places it in the location you specify.
 * The methods you want the Sitemap Generator to use to create your Sitemap. You can use any combination of methods. The following methods are available:
    * *URL* —list individual URLs in this section of the configuration file, along with information about each URL. You would generally use this method in conjunction with another method to manually include additional URLs that other methods wouldn't pick up.
    * *URL list* —point the configuration file to a text file that contains a list of URLs. You might want to use this method if this text file already exists or if you use a script to generate a list of URLs.
    * *Directory paths* —specify the directory paths for your site and corresponding URLs to those paths. The Sitemap Generator will create a list of URLs based on the contents of those directories. You might want to use this method if your site consists of static HTML files.
    * *Access logs* —point to the path to your log files. The Sitemap Generator will create a list of URLs based on the URLs included in the logs. You might want to use this method if your site consists of dynamic pages.
    * *Sitemap* —point to existing Sitemaps that you have created with the Sitemap Generator. The Sitemap Generator will create a single Sitemap that includes the URLs contained in each Sitemap. You could use this method if you have already created several smaller Sitemaps that you want to combine into one larger Sitemap.

*Create the configuration file as follows:*
  
  #. Open the *example_config.xml* file in a text editor. Save it as a new file (such as *config.xml* or *mysite_config.xml*).
  #. Locate the site definition section:
      {{{
      <site 
      base_url="http://www.example.com/" 
      store_into="/var/www/docroot/sitemap.xml.gz"
      verbose="1">
      }}}	
  #. Change the *base_url* value to the URL for your site.
  #. Change the *store_into* value to the path on your web server where you want to store the Sitemap and the filename you want to use for the Sitemap. Generally, this is the path to the base URL since Google can only accept URLs that are at the same level as or subdirectories of the directory that holds the Sitemap. You can specify a relative path from the directory where you upload the script or a complete path from the root of your web server. If you upload the script to your base URL directory, you can simply specify the filename.
  #. Locate the generation method sections that begin with ** *MODIFY or DELETE* **. Each of these sections corresponds to a method for generating a Sitemap.
  #. Delete the sections for the methods you aren’t going to use.
  #. Follow the instructions below for the methods you are going to use.

*URL*

  Locate the following section:
  {{{
  <!-- ** MODIFY or DELETE ** 
  "url" nodes specify individual URLs to include in the map. <br>

  Required attributes: 
  href - the URL

  Optional attributes: 
  lastmod - timestamp of last modification (ISO8601 format) 
  changefreq - how often content at this URL is usually updated
  priority - value 0.0 to 1.0 of relative importance in your site 
  --> 

  <url href="http://www.example.com/stats?q=name" /> 
  <url 
  href="http://www.example.com/stats?q=age" 
  lastmod="2004-11-14T01:00:00-07:00" 
  changefreq="yearly" 
  priority="0.3"
  /> 
  }}}
  This section gives two examples: the first includes only the required attribute and the second includes the required attribute as well as the optional attributes.

  Use this format for each of the URLs you want to include. The *changefreq* attribute gives Google a general idea of how often the URL is updated. This helps Google know how often to visit the page for new content. The *priority* attribute gives Google information about the relative importance of this page compared to the other pages of your site. This attribute has no effect on how Google compares your page to pages on other sites, it just helps Google know which pages of your site that you think are most important.

*URL List*

  Locate the following section:
  {{{
  <!-- ** MODIFY or DELETE **
  "urllist" nodes name text files with lists of URLs. 
  An example file "example_urllist.txt" is provided. 

  Required attributes: 
  path - path to the file 

  Optional attributes: 
  encoding - encoding of the file if not US-ASCII 
  --> 
  <urllist path="example_urllist.txt" encoding="UTF-8" /> 
  }}}				
  Use this format to point to the path and name of the text file that contains your list of URLs. You can use the provided *example_urllist.txt* file as a template for that text file. You can specify either a relative or complete path to your web server. For instance, if the Sitemap Generator and *urlist.txt* file are located in the same directory, you can simply specify the filename of the *.txt* file, If you create a text file with an encoding other than UTF-8, you can use the *encoding* attribute to indicate this encoding. If you have multiple .txt files, you can use wildcards. For instance:
  {{{
  <urllist path="example_urllist*.txt" encoding="UTF-8" /> 
  }}}
  For each URL you include in the text file, you can specify the last modification date, change frequency, and priority. See the URLlist text file reference section for complete information about the structure of this file. 

*Directory paths*

  Locate the following section:

  <!-- ** MODIFY or DELETE ** 
  "directory" nodes tell the script to walk the file system and 
  include all files and directories in the Sitemap.

  Required attributes:
  path - path to begin walking from 
  url - URL equivalent of that path 

  Optional attributes:
  default_file - name of the index or default file for directory URLs

  --> 
  <directory  path="/var/www/icons"    url="http://www.example.com/images/" />
  <directory
     path="/var/www/docroot"
     url="http://www.example.com/"
     default_file="index.html"
  />
  }}}
  This section gives two examples. If all of your pages are contained in subdirectories of one path, then you only need to include one entry. However, if you have multiple paths to pages on your site, include an entry for each.

  Remember that each URL must begin with the base URL you specified in step 3. For instance, the examples given in the *example_config.xml* file both have URLs that begin with {{{http://www.example.com/}}}. Therefore, both URLs are valid.

  Replace the example entries with entries for your site. Many sites will only have one entry that points to the base URL. Ensure that *path* value is the complete path to the directory on your web server. Ensure that the *url* value is the complete URL, including the protocol (such as http) and a trailing slash, if required.

  You can use the *default_file* parameter to specify the filename that your server uses as the default page for a directory. In the above example, */var/www/docroot* resolves to {{{http://www.example.com/index.html}}}. You are not required to specify this. However, if you do, the Sitemap Generator will include the page that maps to each subdirectory only once (rather than list both the directory URL and filename URL) and will use the last modified date of the file (rather than the directory) to extract the lastmod attribute for that page. 

*Access logs*

[Download << 1. Downloading the program files] | [Upload 3. Uploading the necessary files >>]